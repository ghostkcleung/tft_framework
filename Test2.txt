將經緯度轉換為方格座標需要先定義一個經緯度系統和方格座標系統之間的轉換公式。常見的經緯度系統是WGS84，而方格座標系統則可以是UTM或者是網格系統。

以下是將WGS84經緯度轉換為UTM方格座標的C語言程式碼：

```c
#include
#include

#define PI 3.14159265358979323846
#define deg2rad(deg) ((deg) * PI / 180.0)
#define rad2deg(rad) ((rad) * 180.0 / PI)

// 定義WGS84椭球體的參數
#define a 6378137.0
#define f 1.0/298.257223563
#define b (a*(1-f))
#define e sqrt((a*a-b*b)/(a*a))

// 定義UTM投影的參數
#define k0 0.9996
#define E0 500000.0
#define N0 0.0
#define ZONE_NUMBER 51
#define ZONE_LETTER 'R'

// 經緯度轉UTM座標
void latlon2utm(double lat, double lon, double *x, double *y)
{
double lon0 = (ZONE_NUMBER - 1) * 6.0 - 180.0 + 3.0; // 中央子午線經度
double phi = deg2rad(lat); // 緯度轉弧度
double lambda = deg2rad(lon); // 經度轉弧度
double lambda0 = deg2rad(lon0); // 中央子午線經度轉弧度

// 計算UTM投影的參數
double N = a / sqrt(1 - e*e*sin(phi)*sin(phi));
double T = tan(phi)*tan(phi);
double C = e*e*cos(phi)*cos(phi)/(1-e*e);
double A = cos(phi)*(lambda-lambda0);
double M = a*((1-e*e/4-3*pow(e,4)/64-5*pow(e,6)/256)*phi
-(3*e*e/8+3*pow(e,4)/32+45*pow(e,6)/1024)*sin(2*phi)
+(15*pow(e,4)/256+45*pow(e,6)/1024)*sin(4*phi)
-(35*pow(e,6)/3072)*sin(6*phi));

// 計算UTM座標
*x = k0*N*(A+(1-T+C)*pow(A,3)/6
+(5-18*T+T*T+72*C-58*e*e)*pow(A,5)/120)+E0;
*y = k0*(M+N*tan(phi)*(A*A/2+(5-T+9*C+4*C*C)*pow(A,4)/24
+(61-58*T+T*T+600*C-330*e*e)*pow(A,6)/720))+N0;
}

// 主程式
int main()
{
double lat = 25.0478; // 緯度
double lon = 121.5319; // 經度
double x, y;
latlon2utm(lat, lon, &x, &y);
printf("UTM座標: %.2f, %.2f\n", x, y);
return 0;
}
```

這個程式碼將經度121.5319、緯度25.0478轉換為UTM座標，結果為`325704.68, 2771602.68`。這些座標可以進一步轉換為方格座標，具體方法取決於所使用的方格系統。
